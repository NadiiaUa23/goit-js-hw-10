{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Імпорт бібліотек та стилів\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// посиланя на елементи DOM\nclass CountdownTimer {\n  constructor(datetimePickerId, startButtonSelector, daysSelector, hoursSelector, minutesSelector, secondsSelector) {\n    this.datetimePicker = document.getElementById(datetimePickerId);\n    this.startButton = document.querySelector(startButtonSelector);\n    this.daysValue = document.querySelector(daysSelector);\n    this.hoursValue = document.querySelector(hoursSelector);\n    this.minutesValue = document.querySelector(minutesSelector);\n    this.secondsValue = document.querySelector(secondsSelector);\n\n    this.countdownInterval = null; // Змінна для інтервалу таймера\n\n    this.initialize();\n  }\n// Ініціалізація календаря flatpickr\n  initialize() {\n    this.datetimePicker.flatpickr({\n      enableTime: true,\n      time_24hr: true,\n      defaultDate: new Date(),// Встановлення поточної дати та часу за замовчуванням\n      minuteIncrement: 1,\n      onClose: (selectedDates) => {\n        //Обробник події закриття календаря\n        const selectedDate = selectedDates[0];\n        const now = new Date();\n// Перевірка, чи обрана дата майбутня\n        if (selectedDate <= now) {\n          iziToast.error({\n            title: 'Error',\n            message: 'Please choose a date in the future',\n            position: 'topRight'\n          });\n          this.startButton.disabled = true;// Вимкнути кнопку Start\n        } else {\n          this.startButton.disabled = false;// Увімкнути кнопку Start\n        }\n      },\n    });\n\n    this.startButton.disabled = true;// Вимкнути кнопку Start при завантаженні сторінки\n\n//обробника події для кнопки Start\n    this.startButton.addEventListener('click', () => this.startCountdown());\n\n    this.updateTimerDisplay({ days: 0, hours: 0, minutes: 0, seconds: 0 });// Оновлення відображення таймера\n  }\n\n  updateTimerDisplay({ days, hours, minutes, seconds }) {\n    this.daysValue.textContent = this.addLeadingZero(days);\n    this.hoursValue.textContent = this.addLeadingZero(hours);\n    this.minutesValue.textContent = this.addLeadingZero(minutes);\n    this.secondsValue.textContent = this.addLeadingZero(seconds);\n  }\n\n  startCountdown() {\n    //апуск таймера зворотнього відліку до обраної дати.\n    const selectedDate = new Date(this.datetimePicker._flatpickr.selectedDates[0]);\n    this.startButton.disabled = true;\n    clearInterval(this.countdownInterval);\n    this.countdownInterval = setInterval(() => {\n      const now = new Date();\n      const difference = selectedDate - now;\n\n      if (difference <= 0) {\n        clearInterval(this.countdownInterval);\n        this.updateTimerDisplay({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n        iziToast.success({\n          title: 'Success',\n          message: 'Countdown finished!',\n          position: 'topRight'\n        });\n        this.startButton.disabled = false;\n      } else {\n        const time = this.convertMs(difference);\n        this.updateTimerDisplay(time);\n      }\n    }, 1000);\n  }\n\n// якщо, наприклад, value рівне 5, то функція поверне '05', \n//а якщо value рівне 15, то поверне '15'. Це забезпечує, що \n//числа завжди відображаються у форматі з двома цифрами, наприклад, \n//для відображення часу у форматі HH:MM:SS, де числа менші за 10 мають ведучий нуль.\n  addLeadingZero(value) {\n    return value < 10 ? `0${value}` : value;\n  }\n\n  convertMs(ms) {\n    // Допоміжна функція для конвертації мілісекунд у дні, години, хвилини та секунди\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n  }\n}\n\nconst timer = new CountdownTimer(\n  'datetime-picker',\n  '[data-start]',\n  '[data-days]',\n  '[data-hours]',\n  '[data-minutes]',\n  '[data-seconds]'\n);\n\n// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n// import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/iziToast.min.css\";\n\n\n// // Otherwise, selectors are also supported\n// flatpickr(\"#datetime-picker\", {\n//     enableTime: true,\n//     dateFormat: \"Y-m-d H:i\",\n// });\n\n// //    const test = iziToast.show({\n// //   title: 'Hey',\n// // message: 'What would you like to add?'\n// //     });\n\n\n// const datetimePicker = document.getElementById(\"datetime-picker\");\n// const startButton = document.querySelector('[data-start]');\n// const daysValue = document.querySelector('[data-days]');\n// const hoursValue = document.querySelector('[data-hours]');\n// const minutesValue = document.querySelector('[data-minutes]');\n// const secondsValue = document.querySelector('[data-seconds]');\n\n// const options = {\n//     enableTime: true,// выбор времени\n//     time_24hr: true,//Отображает выбор времени в 24-часовом режиме без выбора AM/PM, \n//     //если этот параметр включен.\n//     defaultDate: new Date(),\n//     /*Устанавливает начальную выбранную дату(ы).\n// Если вы используете режим: «несколько» или календарь диапазона,\n//  укажите массив объектов даты или массив строк даты, которые соответствуют вашему формату даты.\n// В противном случае вы можете указать один объект Date или строку даты.*/\n//     minuteIncrement: 1, // Adjusts the step for the minute input (incl. scrolling)\n//     onClose(selectedDates)//Функции, которые будут активироваться каждый раз при закрытии календаря.\n//      {\n//       console.log(selectedDates[0]);\n//     },\n//   };\n\n//   let userSelectedDate;\n// startButton.disabled = true;\n\n// flatpickr(\"#datetime-picker\", {\n//     onClose: function (selectedDates, dateStr, instance) {\n//         userSelectedDate = selectedDates[0];\n//         const currentDate = new Date();\n\n//         if (userSelectedDate <= currentDate){\n//             iziToast.error({\n//                 title: 'Error',\n//                 message : 'plese choose a date in the future',\n//             })\n//             startButton.disabled = true;\n//         } else {\n//             startButton.disabled = false;\n//         }\n//     }\n// });\n\n// startButton.addEventListener('click', function() {\n// const countdown = userSelectedDate - new Date();\n\n// if (countdown <= 0) {\n//     iziToast.error({\n//         title: 'Error',\n//         message : 'plese choose a date in the future',\n//     });\n//     return;\n//  }\n// })\n\n\n\n\n//   function convertMs(ms) {\n//     // Number of milliseconds per unit of time\n//     const second = 1000;\n//     const minute = second * 60;\n//     const hour = minute * 60;\n//     const day = hour * 24;\n  \n//     // Remaining days\n//     const days = Math.floor(ms / day);\n//     // Remaining hours\n//     const hours = Math.floor((ms % day) / hour);\n//     // Remaining minutes\n//     const minutes = Math.floor(((ms % day) % hour) / minute);\n//     // Remaining seconds\n//     const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n//     return { days, hours, minutes, seconds };\n//   }\n  \n//   console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n//   console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n//   console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n\n ///////////////////////////////////////////////\n\n\n// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n// import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/iziToast.min.css\";\n\n// const datetimePicker = document.getElementById('datetime-picker');\n// const startButton = document.querySelector('[data-start]');\n// const daysValue = document.querySelector('[data-days]');\n// const hoursValue = document.querySelector('[data-hours]');\n// const minutesValue = document.querySelector('[data-minutes]');\n// const secondsValue = document.querySelector('[data-seconds]');\n\n// let countdownInterval;\n\n// datetimePicker.flatpickr({\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date,\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     const selectedDate = selectedDates[0];\n//     const now = new Date();\n\n//     if (selectedDate <= now) {\n//       iziToast.error({\n//         title: 'Error',\n//         message: 'Please choose a date in the future',\n//         position: 'topRight'\n//       });\n//       startButton.disabled = true;\n//     } else {\n//       startButton.disabled = false;\n//     }\n//   },\n// });\n\n// startButton.disabled = true;\n\n// function updateTimerDisplay(time) {\n//   daysValue.textContent = addLeadingZero(time.days);\n//   hoursValue.textContent = addLeadingZero(time.hours);\n//   minutesValue.textContent = addLeadingZero(time.minutes);\n//   secondsValue.textContent = addLeadingZero(time.seconds);\n// }\n\n// function startCountdown(targetDate) {\n//   clearInterval(countdownInterval);\n//   datetimePicker.disabled = true\n\n//   countdownInterval = setInterval(() => {\n//     const now = new Date();\n//     const difference = targetDate - now;\n\n//     if (difference <= 0) {\n//       clearInterval(countdownInterval);\n//       updateTimerDisplay(convertMs(0));\n//       iziToast.success({\n//         title: 'Success',\n//         message: 'Countdown finished!',\n//         position: 'topRight'\n//       });\n//       startButton.disabled = false;\n//     } else {\n//       updateTimerDisplay(convertMs(difference));\n//     }\n//   }, 1000);\n// }\n\n// startButton.addEventListener('click', () => {\n//   const selectedDate = new Date(datetimePicker._flatpickr.selectedDates[0]);\n//   startButton.disabled = true;\n//   startCountdown(selectedDate);\n// });\n\n// function addLeadingZero(value) {\n//   return value < 10 ? `0${value}` : value;\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n////////////////////////////"],"names":["CountdownTimer","datetimePickerId","startButtonSelector","daysSelector","hoursSelector","minutesSelector","secondsSelector","selectedDates","iziToast","days","hours","minutes","seconds","selectedDate","difference","time","value","ms"],"mappings":"oGAOA,MAAMA,CAAe,CACnB,YAAYC,EAAkBC,EAAqBC,EAAcC,EAAeC,EAAiBC,EAAiB,CAChH,KAAK,eAAiB,SAAS,eAAeL,CAAgB,EAC9D,KAAK,YAAc,SAAS,cAAcC,CAAmB,EAC7D,KAAK,UAAY,SAAS,cAAcC,CAAY,EACpD,KAAK,WAAa,SAAS,cAAcC,CAAa,EACtD,KAAK,aAAe,SAAS,cAAcC,CAAe,EAC1D,KAAK,aAAe,SAAS,cAAcC,CAAe,EAE1D,KAAK,kBAAoB,KAEzB,KAAK,WAAU,CAChB,CAED,YAAa,CACX,KAAK,eAAe,UAAU,CAC5B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAUC,GAAkB,CAELA,EAAc,CAAC,GACxB,IAAI,MAGdC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UACtB,CAAW,EACD,KAAK,YAAY,SAAW,IAE5B,KAAK,YAAY,SAAW,EAE/B,CACP,CAAK,EAED,KAAK,YAAY,SAAW,GAG5B,KAAK,YAAY,iBAAiB,QAAS,IAAM,KAAK,eAAc,CAAE,EAEtE,KAAK,mBAAmB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAG,CAAA,CACtE,CAED,mBAAmB,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACpD,KAAK,UAAU,YAAc,KAAK,eAAeH,CAAI,EACrD,KAAK,WAAW,YAAc,KAAK,eAAeC,CAAK,EACvD,KAAK,aAAa,YAAc,KAAK,eAAeC,CAAO,EAC3D,KAAK,aAAa,YAAc,KAAK,eAAeC,CAAO,CAC5D,CAED,gBAAiB,CAEf,MAAMC,EAAe,IAAI,KAAK,KAAK,eAAe,WAAW,cAAc,CAAC,CAAC,EAC7E,KAAK,YAAY,SAAW,GAC5B,cAAc,KAAK,iBAAiB,EACpC,KAAK,kBAAoB,YAAY,IAAM,CAEzC,MAAMC,EAAaD,EADP,IAAI,KAGhB,GAAIC,GAAc,EAChB,cAAc,KAAK,iBAAiB,EACpC,KAAK,mBAAmB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAG,CAAA,EACrEN,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,sBACT,SAAU,UACpB,CAAS,EACD,KAAK,YAAY,SAAW,OACvB,CACL,MAAMO,EAAO,KAAK,UAAUD,CAAU,EACtC,KAAK,mBAAmBC,CAAI,CAC7B,CACF,EAAE,GAAI,CACR,CAMD,eAAeC,EAAO,CACpB,OAAOA,EAAQ,GAAK,IAAIA,CAAK,GAAKA,CACnC,CAED,UAAUC,EAAI,CAOZ,MAAMR,EAAO,KAAK,MAAMQ,EAAK,KAAG,EAC1BP,EAAQ,KAAK,MAAOO,EAAK,MAAO,IAAI,EACpCN,EAAU,KAAK,MAAQM,EAAK,MAAO,KAAQ,GAAM,EACjDL,EAAU,KAAK,MAASK,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAR,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CACH,CAEc,IAAIZ,EAChB,kBACA,eACA,cACA,eACA,iBACA,gBACF"}