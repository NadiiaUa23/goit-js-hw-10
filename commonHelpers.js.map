{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n// import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/iziToast.min.css\";\n\n\n// // Otherwise, selectors are also supported\n// flatpickr(\"#datetime-picker\", {\n//     enableTime: true,\n//     dateFormat: \"Y-m-d H:i\",\n// });\n\n// //    const test = iziToast.show({\n// //   title: 'Hey',\n// // message: 'What would you like to add?'\n// //     });\n\n\n// const datetimePicker = document.getElementById(\"datetime-picker\");\n// const startButton = document.querySelector('[data-start]');\n// const daysValue = document.querySelector('[data-days]');\n// const hoursValue = document.querySelector('[data-hours]');\n// const minutesValue = document.querySelector('[data-minutes]');\n// const secondsValue = document.querySelector('[data-seconds]');\n\n// const options = {\n//     enableTime: true,// выбор времени\n//     time_24hr: true,//Отображает выбор времени в 24-часовом режиме без выбора AM/PM, \n//     //если этот параметр включен.\n//     defaultDate: new Date(),\n//     /*Устанавливает начальную выбранную дату(ы).\n// Если вы используете режим: «несколько» или календарь диапазона,\n//  укажите массив объектов даты или массив строк даты, которые соответствуют вашему формату даты.\n// В противном случае вы можете указать один объект Date или строку даты.*/\n//     minuteIncrement: 1, // Adjusts the step for the minute input (incl. scrolling)\n//     onClose(selectedDates)//Функции, которые будут активироваться каждый раз при закрытии календаря.\n//      {\n//       console.log(selectedDates[0]);\n//     },\n//   };\n\n//   let userSelectedDate;\n// startButton.disabled = true;\n\n// flatpickr(\"#datetime-picker\", {\n//     onClose: function (selectedDates, dateStr, instance) {\n//         userSelectedDate = selectedDates[0];\n//         const currentDate = new Date();\n\n//         if (userSelectedDate <= currentDate){\n//             iziToast.error({\n//                 title: 'Error',\n//                 message : 'plese choose a date in the future',\n//             })\n//             startButton.disabled = true;\n//         } else {\n//             startButton.disabled = false;\n//         }\n//     }\n// });\n\n// startButton.addEventListener('click', function() {\n// const countdown = userSelectedDate - new Date();\n\n// if (countdown <= 0) {\n//     iziToast.error({\n//         title: 'Error',\n//         message : 'plese choose a date in the future',\n//     });\n//     return;\n//  }\n// })\n\n\n\n\n//   function convertMs(ms) {\n//     // Number of milliseconds per unit of time\n//     const second = 1000;\n//     const minute = second * 60;\n//     const hour = minute * 60;\n//     const day = hour * 24;\n  \n//     // Remaining days\n//     const days = Math.floor(ms / day);\n//     // Remaining hours\n//     const hours = Math.floor((ms % day) / hour);\n//     // Remaining minutes\n//     const minutes = Math.floor(((ms % day) % hour) / minute);\n//     // Remaining seconds\n//     const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n//     return { days, hours, minutes, seconds };\n//   }\n  \n//   console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n//   console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n//   console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n\n  \n\n////////////////////////////////////////////////////////////\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\nlet countdownInterval;\n\ndatetimePicker.flatpickr({\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date,\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    const now = new Date();\n\n    if (selectedDate <= now) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight'\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n});\n\nstartButton.disabled = true;\n\nfunction updateTimerDisplay(time) {\n  daysValue.textContent = addLeadingZero(time.days);\n  hoursValue.textContent = addLeadingZero(time.hours);\n  minutesValue.textContent = addLeadingZero(time.minutes);\n  secondsValue.textContent = addLeadingZero(time.seconds);\n}\n\nfunction startCountdown(targetDate) {\n  clearInterval(countdownInterval);\n  datetimePicker.disabled = true\n\n  countdownInterval = setInterval(() => {\n    const now = new Date();\n    const difference = targetDate - now;\n\n    if (difference <= 0) {\n      clearInterval(countdownInterval);\n      updateTimerDisplay(convertMs(0));\n      iziToast.success({\n        title: 'Success',\n        message: 'Countdown finished!',\n        position: 'topRight'\n      });\n      startButton.disabled = false;\n    } else {\n      updateTimerDisplay(convertMs(difference));\n    }\n  }, 1000);\n}\n\nstartButton.addEventListener('click', () => {\n  const selectedDate = new Date(datetimePicker._flatpickr.selectedDates[0]);\n  startButton.disabled = true;\n  startCountdown(selectedDate);\n});\n\nfunction addLeadingZero(value) {\n  return value < 10 ? `0${value}` : value;\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}"],"names":["datetimePicker","startButton","daysValue","hoursValue","minutesValue","secondsValue","countdownInterval","selectedDates","iziToast","updateTimerDisplay","time","addLeadingZero","startCountdown","targetDate","difference","convertMs","selectedDate","value","ms","days","hours","minutes","seconds"],"mappings":"oGA4GA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EAEJN,EAAe,UAAU,CACvB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQO,EAAe,CACAA,EAAc,CAAC,GACxB,IAAI,MAGdC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDP,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,CAAC,EAEDA,EAAY,SAAW,GAEvB,SAASQ,EAAmBC,EAAM,CAChCR,EAAU,YAAcS,EAAeD,EAAK,IAAI,EAChDP,EAAW,YAAcQ,EAAeD,EAAK,KAAK,EAClDN,EAAa,YAAcO,EAAeD,EAAK,OAAO,EACtDL,EAAa,YAAcM,EAAeD,EAAK,OAAO,CACxD,CAEA,SAASE,EAAeC,EAAY,CAClC,cAAcP,CAAiB,EAC/BN,EAAe,SAAW,GAE1BM,EAAoB,YAAY,IAAM,CAEpC,MAAMQ,EAAaD,EADP,IAAI,KAGZC,GAAc,GAChB,cAAcR,CAAiB,EAC/BG,EAAmBM,EAAU,CAAC,CAAC,EAC/BP,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,sBACT,SAAU,UAClB,CAAO,EACDP,EAAY,SAAW,IAEvBQ,EAAmBM,EAAUD,CAAU,CAAC,CAE3C,EAAE,GAAI,CACT,CAEAb,EAAY,iBAAiB,QAAS,IAAM,CAC1C,MAAMe,EAAe,IAAI,KAAKhB,EAAe,WAAW,cAAc,CAAC,CAAC,EACxEC,EAAY,SAAW,GACvBW,EAAeI,CAAY,CAC7B,CAAC,EAED,SAASL,EAAeM,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAIA,CAAK,GAAKA,CACpC,CAEA,SAASF,EAAUG,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}